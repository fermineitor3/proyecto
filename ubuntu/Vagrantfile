# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.12"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
	vb.name = "Ubuntu Nagios & Prometheus"
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "1536"
	 vb.cpus = "1"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  
  #Esto es un script que se ejecutará cada vez que la maquina se inicie de cero. Si ya está arrancada no actuará
  config.vm.provision "shell", inline: <<-SHELL
  #Los siguientes comandos son para que la maquina se actualice:
      apt-get -y update
	  apt-get -y upgrade
  #Instalamos docker para permitir usar el repositorio oficial de docker sobre https se harán los siguientes comandos:
      apt-get -y install \
	  apt-transport-https \
	  ca-certificates \
	  curl \
	  software-properties-common
  #Agregamos la llave GPG oficial de Docker
	  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  #Para instalar el repositorio estable usaremos el siguiente comando:
      sudo add-apt-repository \
		"deb [arch=amd64] https://download.docker.com/linux/ubuntu \
		$(lsb_release -cs) \
		stable"
  #Instalamos Docker CE:
	  apt-get -y update
	  apt-get -y install docker-ce
	  usermod -aG docker vagrant
  #Instalamos Docker Compose para poder tener en funcionamiento varios contenedores y que interactúen entre ellos:
      sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	  sudo chmod +x /usr/local/bin/docker-compose
  #Instalamos Nagios:
  #   docker run --name nagios4 -p 8080:80 jasonrivers/nagios:latest
  #   apt-get install -y apache2
  #Instalamos el agente NRPE de Nagios
	 sudo apt-get -y update
     sudo apt-get -y install nagios-nrpe-server nagios-plugins
  #  vim /etc/nagios/nrpe.cfg
  #  sudo /etc/init.d/nagios-nrpe-server stop
  #  sudo /etc/init.d/nagios-nrpe-server start
     sudo /etc/init.d/nagios-nrpe-server restart
  SHELL
end
